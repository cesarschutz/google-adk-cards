package agents.cards.visa.agents.card;

import agents.cards.visa.agents.card.model.CancelCardDto;
import agents.cards.visa.agents.card.model.CardDto;
import agents.cards.visa.agents.shared.ApiResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.adk.agents.BaseAgent;
import com.google.adk.agents.LlmAgent;
import com.google.adk.tools.Annotations;
import com.google.adk.tools.FunctionTool;
import com.google.adk.tools.Annotations.Schema;

import org.springframework.stereotype.Component;

import java.util.Map;

public class CardAgent {

    public static BaseAgent createAgent() {
        return LlmAgent.builder()
                .name("card_agent")
                .model("gemini-2.0-flash")
                .description("Agente especialista em cart√µes: consulta, bloqueio, desbloqueio e cancelamento.")
                .instruction("""
                        Voc√™ √© o agente encarregado de executar opera√ß√µes de cart√£o de cr√©dito. \s
                        1. Receba o `uuid` e demais par√¢metros; se faltar algo, pergunte com educa√ß√£o: ‚ÄúQual o UUID ou que dado est√° em falta?‚Äù \s
                        2. Use os c√≥digos HTTP (200, 404 etc.) apenas internamente; **n√£o** exiba o status para o usu√°rio. \s
                        3. Ao retornar dados, envie s√≥ o objeto JSON do corpo (se houver). Se for s√≥ texto, responda em linguagem natural, sem usar JSON. \s
                        4. Para a√ß√µes cr√≠ticas (bloqueio, cancelamento), confirme sempre os detalhes antes de executar: pe√ßa motivo e um ‚ÄúSim/N√£o‚Äù. \s
                        5. Armazene o √∫ltimo `uuid` usado e interprete ‚Äúeste cart√£o‚Äù para reutiliz√°-lo automaticamente. \s
                        6. Depois de cada opera√ß√£o, sugira duas pr√≥ximas a√ß√µes no mesmo estilo acolhedor: \s
                           - **Consulta** ‚Üí ‚ÄúBloquear este cart√£o?‚Äù / ‚ÄúVer fatura?‚Äù \s
                           - **Bloqueio/Desbloqueio** ‚Üí ‚ÄúConsultar status deste cart√£o?‚Äù / ‚ÄúVer fatura?‚Äù \s
                        7. Se algo estiver vago, questione gentilmente: ‚ÄúVoc√™ quis dizer o cart√£o com final 0444?‚Äù \s
                        8. Mantenha um tom coloquial, encorajador, pr√°tico e descontra√≠do, com pitadas de humor.
                        """)
                .tools(
                        FunctionTool.create(CardAgent.class, "block"),
                        FunctionTool.create(CardAgent.class, "unblock"),
                        FunctionTool.create(CardAgent.class, "get"),
                        FunctionTool.create(CardAgent.class, "cancel")
                )
                .build();
    }

    @Annotations.Schema(description = "Bloqueia um cart√£o")
    public static ApiResponse<String> block(
            @Annotations.Schema(description = "UUID do cart√£o") String uuid
    ) {
        // üîß Aqui voc√™ chama sua API REST e preenche o DTO com a resposta real
        String body = "cart√£o bloqueado";
        return new ApiResponse<>(200, body, "Cart√£o " + uuid + " bloqueado com sucesso.");
    }

    @Annotations.Schema(description = "Desbloqueia um cart√£o")
    public static ApiResponse<String> unblock(
            @Annotations.Schema(description = "UUID do cart√£o") String uuid
    ) {
        String body = "cart√£o desbloqueado";
        return new ApiResponse<>(200, body, "Cart√£o " + uuid + " desbloqueado com sucesso.");
    }

    @Annotations.Schema(description = "Consulta dados de um cart√£o")
    public static ApiResponse<CardDto> get(
            @Annotations.Schema(description = "UUID do cart√£o") String uuid
    ) {
        // üîß Aqui voc√™ chama sua API REST e obt√©m um CardDto real
        CardDto dto = new CardDto(uuid, "4321", 10000L, 2000L, 8000L, 0L, "7345 7485 8347 2486");
        return new ApiResponse<>(200, dto, "Consulta do cart√£o " + uuid + " realizada.");
    }

    @Annotations.Schema(description = "Cancela um cart√£o")
    public static ApiResponse<String> cancel(
            @Annotations.Schema(description = "Payload para cancelar cart√£o") CancelCardDto dto
    ) {
        // üîß Aqui voc√™ chama sua API REST para cancelar
        String body = "cart√£o bloqueado";

        return new ApiResponse<>(200, body, "Cart√£o " + dto.getUuid() + " cancelado.");
    }
}